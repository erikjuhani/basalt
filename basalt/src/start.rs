use std::marker::PhantomData;

use basalt_core::obsidian::Vault;
use ratatui::{
    buffer::Buffer,
    layout::{Constraint, Flex, Layout, Rect, Size},
    style::Stylize,
    text::Text,
    widgets::{StatefulWidgetRef, Widget},
};

use crate::vault_selector::{VaultSelector, VaultSelectorState};

const TITLE: &str = "‚ãÖùï≠ùñÜùñòùñÜùñëùñô‚ãÖ";

pub const LOGO: [&str; 25] = [
    "           ‚ñí‚ñà‚ñà‚ñà‚ñì‚ñë          ",
    "          ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë         ",
    "        ‚ñí‚ñà‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì‚ñí‚ñí‚ñë        ",
    "      ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñí‚ñë       ",
    "     ‚ñí‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí‚ñí‚ñë ‚ñë‚ñí‚ñí‚ñë      ",
    "   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñí‚ñë‚ñí‚ñë  ‚ñë‚ñí‚ñí‚ñí‚ñë    ",
    " ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë  ‚ñë‚ñë‚ñí‚ñí‚ñí‚ñë   ",
    "‚ñë‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñí‚ñë‚ñë‚ñà‚ñà ‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñë  ",
    "‚ñí‚ñà‚ñà‚ñì‚ñì‚ñí‚ñë‚ñë‚ñë‚ñí‚ñà‚ñà‚ñë‚ñë‚ñí‚ñë‚ñë‚ñë    ‚ñë‚ñí‚ñë  ",
    "‚ñë‚ñà‚ñà‚ñà‚ñì‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñì‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë   ‚ñë‚ñí‚ñí  ",
    " ‚ñí‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë‚ñí‚ñí  ",
    " ‚ñí‚ñí‚ñà‚ñà‚ñí‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñë ‚ñë‚ñí  ",
    " ‚ñì‚ñí‚ñë‚ñà‚ñà‚ñë‚ñë‚ñí‚ñà‚ñì‚ñë‚ñë ‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë ‚ñë‚ñë‚ñí  ",
    " ‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí‚ñë‚ñì‚ñà‚ñë‚ñë ‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë ‚ñë‚ñë‚ñí‚ñë ",
    "‚ñí‚ñà‚ñí‚ñì‚ñí‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñí‚ñí‚ñë",
    "‚ñì‚ñà‚ñí‚ñì‚ñí‚ñì‚ñà‚ñà‚ñì‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë ‚ñë‚ñë‚ñí‚ñí",
    "‚ñà‚ñà‚ñì‚ñì‚ñí‚ñí‚ñì‚ñà‚ñì‚ñì ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí",
    "‚ñí‚ñà‚ñì‚ñí‚ñë‚ñë ‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñí‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñë",
    "‚ñë‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñë ",
    " ‚ñë‚ñë‚ñí‚ñí‚ñë ‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñë   ",
    "   ‚ñë‚ñí‚ñí‚ñí‚ñë ‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñë‚ñë    ",
    "     ‚ñë‚ñí‚ñí‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñë      ",
    "       ‚ñë‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë       ",
    "        ‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë         ",
    "          ‚ñë‚ñë‚ñí‚ñí‚ñë            ",
];

#[derive(Debug, Default, Clone, PartialEq)]
pub struct StartState<'a> {
    pub(crate) vault_selector_state: VaultSelectorState<'a>,
    pub(crate) size: Size,
    pub(crate) version: &'a str,
}

impl<'a> StartState<'a> {
    pub fn new(version: &'a str, size: Size, items: Vec<&'a Vault>) -> Self {
        let vault_selector_state = VaultSelectorState::new(items);

        StartState {
            version,
            size,
            vault_selector_state,
        }
    }

    pub fn select(&self) -> Self {
        Self {
            vault_selector_state: self.vault_selector_state.select(),
            ..self.clone()
        }
    }

    pub fn items(self) -> Vec<&'a Vault> {
        self.vault_selector_state.items
    }

    pub fn get_item(self, index: usize) -> Option<&'a Vault> {
        self.vault_selector_state.items.get(index).cloned()
    }

    pub fn selected(&self) -> Option<usize> {
        self.vault_selector_state.selected()
    }

    pub fn next(self) -> Self {
        Self {
            vault_selector_state: self.vault_selector_state.next(),
            ..self
        }
    }

    pub fn previous(self) -> Self {
        Self {
            vault_selector_state: self.vault_selector_state.previous(),
            ..self
        }
    }
}

#[derive(Default)]
pub struct StartScreen<'a> {
    _lifetime: PhantomData<&'a ()>,
}

impl<'a> StatefulWidgetRef for StartScreen<'a> {
    type State = StartState<'a>;

    fn render_ref(&self, area: Rect, buf: &mut Buffer, state: &mut Self::State) {
        let [_, center, _] = Layout::horizontal([
            Constraint::Fill(1),
            Constraint::Length(79),
            Constraint::Fill(1),
        ])
        .areas(area);

        let [_, top, bottom, _, help] = Layout::vertical([
            Constraint::Fill(1),
            Constraint::Length(28),
            Constraint::Min(6),
            Constraint::Fill(1),
            Constraint::Length(1),
        ])
        .flex(Flex::Center)
        .margin(1)
        .areas(center);

        let [logo, title] =
            Layout::vertical([Constraint::Fill(1), Constraint::Length(3)]).areas(top);

        let [_, title, version] = Layout::horizontal([
            Constraint::Fill(1),
            Constraint::Fill(1),
            Constraint::Fill(1),
        ])
        .flex(Flex::SpaceBetween)
        .margin(1)
        .areas(title);

        let [bottom] = Layout::horizontal([Constraint::Length(60)])
            .flex(Flex::Center)
            .areas(bottom);

        Text::from_iter(LOGO)
            .dark_gray()
            .centered()
            .render(logo, buf);

        Text::from(TITLE).dark_gray().centered().render(title, buf);

        Text::from(state.version)
            .dark_gray()
            .italic()
            .centered()
            .render(version, buf);

        Text::from("Press (?) for help")
            .italic()
            .dark_gray()
            .centered()
            .render(help, buf);

        VaultSelector::default().render_ref(bottom, buf, &mut state.vault_selector_state);
    }
}
